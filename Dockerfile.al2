FROM amazonlinux:2

ARG USERNAME=dotmatics
ARG TOMCAT_VERSION=8.5.77
ARG OPENBABEL_VERSION=openbabel-2.3.2
ARG CORRETTO_VERSION=11.0.14.9-1

ENV LANG C.UTF-8
ENV JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto
# In addition to installing the Amazon corretto, we also install
# fontconfig. The folks who manage the docker hub's
# official image library have found that font management
# is a common usecase, and painpoint, and have
# recommended that Java images include font support.
#
# See:
#  https://github.com/docker-library/official-images/blob/master/test/tests/java-uimanager-font/container.java

# The logic and code related to Fingerprint is contributed by @tianon in a Github PR's Conversation
# Comment = https://github.com/docker-library/official-images/pull/7459#issuecomment-592242757
# PR = https://github.com/docker-library/official-images/pull/7459
RUN set -eux \
    && export GNUPGHOME="$(mktemp -d)" \
    && curl -fL -o corretto.key https://yum.corretto.aws/corretto.key \
    && gpg --batch --import corretto.key \
    && gpg --batch --export --armor '6DC3636DAE534049C8B94623A122542AB04F24E3' > corretto.key \
    && rpm --import corretto.key \
    && rm -r "$GNUPGHOME" corretto.key \
    && curl -fL -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo \
    && grep -q '^gpgcheck=1' /etc/yum.repos.d/corretto.repo \
    && echo "priority=9" >> /etc/yum.repos.d/corretto.repo \
    && yum install -y java-11-amazon-corretto-devel-$CORRETTO_VERSION \
    && (find /usr/lib/jvm/java-11-amazon-corretto -name src.zip -delete || true) \
    && yum install -y fontconfig \
                      shadow-utils \
                      sudo \
                      which  \
                      curl 
    #                   dejavu-sans-fonts  \
    #                   tar  \
    #                   cairo-devel  \
    #                   swig  \
    #                   python3-dev  \
    #                   cmake  \
    #                   gcc-c++  \
    #                   make \
    # && yum clean all


# # add sudo user
# RUN useradd -ms /bin/bash $USERNAME \
    # && echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/${USERNAME}

# # download tomcat
# RUN curl -O --output-dir /tmp https://dlcdn.apache.org/tomcat/tomcat-8/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz

# # extract and move to directory
# RUN mkdir -p /opt/tomcat 

# RUN tar -xf /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz

# RUN mv apache-tomcat-${TOMCAT_VERSION} /opt/tomcat/ \
  # && chown -R $USERNAME: /opt/tomcat \
  # && chmod +x /opt/tomcat/apache-tomcat-${TOMCAT_VERSION}/bin/*.sh \
  # && echo "set JAVA_OPTS=%JAVA_OPTS% -Dfile.encoding=UTF-8" >> /opt/tomcat/apache-tomcat-${TOMCAT_VERSION}/bin/catalina.bat \
  # && echo "export CATALINA_HOME=/opt/tomcat/apache-tomcat-${TOMCAT_VERSION}" >> /.bashrc \
  # && sed -i '124 a JAVA_OPTS=\"\$JAVA_OPTS -Xmx2048m -XX:+UseG1GC\"\nexport JAVA_OPTS' /opt/tomcat/apache-tomcat-${TOMCAT_VERSION}/bin/catalina.sh \
  # && rm /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz

# # # install openbabel
# COPY ${OPENBABEL_VERSION}.tar.gz /tmp/
# # # RUN curl -O --output-dir /tmp https://github.com/openbabel/openbabel/archive/${OPENBABEL_VERSION}.tar.gz \

# RUN tar -xzf /tmp/${OPENBABEL_VERSION}.tar.gz \
  # && mv ${OPENBABEL_VERSION} /usr/local/bin/obabel \
  # && rm /tmp/${OPENBABEL_VERSION}.tar.gz

# RUN mkdir /usr/local/bin/obabel/build
# WORKDIR /usr/local/bin/obabel/build

# RUN cmake \
  # -D PYTHON_BINDINGS=ON \
  # -D RUN_SWIG=ON \
  # -D PYTHON_EXECUTABLE=/usr/bin/python3 \
  # -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")  \
  # -D DPYTHON_LIBRARY=$(python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))") \
  # -D CMAKE_INSTALL_PREFIX=/usr \
  # -D CMAKE_BUILD_TYPE=RELEASE \
  # ..

# RUN make -j $(nproc) \
  # && make install

# USER $USERNAME 
# WORKDIR /home/$USERNAME
